package presenter;

import models.GeneralTree;
import models.Grammar;
import models.Node;
import views.MainFrame;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;

public class Presenter implements ActionListener {

    private MainFrame mainFrame;
    private Grammar grammar;

    public Presenter(){
        this.mainFrame = new MainFrame(this);
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        switch (e.getActionCommand()){
            case "Enter Grammar":
                this.enterGrammar();
            case "Guardar":
                this.saveGrammar();
                break;
            case "Cancelar":
                this.cancelAddGrammar();
        }
    }

    private void enterGrammar(){
        mainFrame.showEnterGrammar();
    }

    public void saveGrammar(){
        String[] listTerminalSymbol = mainFrame.getTerminalSymbol().split(",");
        String[] listNonTerminalSymbol = mainFrame.getNonTerminalSymbol().split(",");
        String axiomaticSymbol = mainFrame.getAxiomaticSymbol();
        Grammar grammar1 = new Grammar(listNonTerminalSymbol,listTerminalSymbol,axiomaticSymbol);
        mainFrame.setvLabel(grammar1.getNoTerminalSymbolsList().toString());
        mainFrame.setSigmaValueLabel(grammar1.getTerminalSymbolsList().toString());
        mainFrame.setAxiomaticValueLabel(grammar1.getAxiomaticSymbol());
        mainFrame.hideCreateDialog();
    }

    public void cancelAddGrammar(){
        mainFrame.hideCreateDialog();
    }

    private void validateGrammar(){
        //Call arrays generated by front
        //Verify not empty
        //Verify sets disjunction
        //Verify axiomatic isn't empty
    }

    public static void main(String[] args) {
        new Presenter();

        ArrayList<String> nonTerminalSymbolsList = new ArrayList<>();
        nonTerminalSymbolsList.add("S");
        nonTerminalSymbolsList.add("S");
        nonTerminalSymbolsList.add("S");
        ArrayList<String> terminalSymbolsList = new ArrayList<>();
        terminalSymbolsList.add("a");
        terminalSymbolsList.add("Sa");
        terminalSymbolsList.add("Sb");

        GeneralTree generalTree = new GeneralTree(terminalSymbolsList,nonTerminalSymbolsList,new Node("S"));
        generalTree.addNewNode();
        generalTree.showNodeList();
    }
}
