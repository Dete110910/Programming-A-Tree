package presenter;

import models.GeneralTree;
import models.Grammar;
import models.Node;
import views.MainFrame;
import views.UtilitiesMessages;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Arrays;

public class Presenter implements ActionListener {

    private MainFrame mainFrame;
    private Grammar grammar;

    public Presenter(){
        this.mainFrame = new MainFrame(this);
        this.grammar = new Grammar();
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        switch (e.getActionCommand()){
            case "Enter Grammar":
                this.enterGrammar();
                break;
            case "Guardar":
                this.saveGrammar();
                break;
            case "View General Tree":
                this.viewGeneralTree();
                break;
            case "Cancelar":
                this.cancelAddGrammar();
        }
    }


    private void enterGrammar(){
        this.mainFrame.showEnterGrammar();
    }

    public void saveGrammar(){
        ArrayList<String> listTerminalSymbol = new ArrayList<>(Arrays.asList(mainFrame.getTerminalSymbol().split(",")));
        ArrayList<String> listNonTerminalSymbol = new ArrayList<>(Arrays.asList(mainFrame.getNonTerminalSymbol().split(",")));
        String axiomaticSymbol = mainFrame.getAxiomaticSymbol();

        grammar.setTerminalSymbolsList(listTerminalSymbol);
        grammar.setNoTerminalSymbolsList(listNonTerminalSymbol);
        grammar.setAxiomaticSymbol(axiomaticSymbol);

        for (int i = 0; i < listTerminalSymbol.size(); i++) {
            if(listTerminalSymbol == null){
                UtilitiesMessages.showErrorDialog("Debe agregar al menos un elemento a la lista", "Error");
            }else if(Character.isUpperCase(listTerminalSymbol.get(i).charAt(i))) {
                UtilitiesMessages.showErrorDialog("Los simbolos terminales deben ingresarse en minúscula", "Error");
            }else{
                this.mainFrame.setvLabel(grammar.getNoTerminalSymbolsList().toString().replace("[", "{").replace("]", "}"));
                this.mainFrame.setSigmaValueLabel(grammar.getTerminalSymbolsList().toString().replace("[", "{").replace("]", "}"));
            }
        }

        for (int i = 0; i < listNonTerminalSymbol.size(); i++) {
            if(listNonTerminalSymbol == null){
                UtilitiesMessages.showErrorDialog("Debe agregar al menos un elemento a la lista", "Error");
            } else if(!Character.isUpperCase(listNonTerminalSymbol.get(i).charAt(i))){
                UtilitiesMessages.showErrorDialog("Los simbolos no terminales deben ingresarse en Mayúscula", "Error");
            }else{
                this.mainFrame.setvLabel(grammar.getNoTerminalSymbolsList().toString().replace("[", "{").replace("]", "}"));
                this.mainFrame.setSigmaValueLabel(grammar.getTerminalSymbolsList().toString().replace("[", "{").replace("]", "}"));
            }
        }

        if(axiomaticSymbol.length() == 1){
            this.mainFrame.setAxiomaticValueLabel(grammar.getAxiomaticSymbol());
        }else{
            UtilitiesMessages.showErrorDialog("Solo se puede establecer un simbolo axiomatico", "Error");
        }

        this.mainFrame.hideCreateDialog();
    }


    public void cancelAddGrammar(){
        this.mainFrame.hideCreateDialog();
    }

    private void viewGeneralTree() {
        ArrayList<String> nonTerminalSymbolsList = new ArrayList<>();
        nonTerminalSymbolsList.add("S");
        nonTerminalSymbolsList.add("S");
        nonTerminalSymbolsList.add("S");
        ArrayList<String> terminalSymbolsList = new ArrayList<>();
        terminalSymbolsList.add("a");
        terminalSymbolsList.add("Sa");
        terminalSymbolsList.add("Sb");

        GeneralTree generalTree = new GeneralTree(terminalSymbolsList,nonTerminalSymbolsList, new Node("S"));
        generalTree.addNewNode();
        //generalTree.showNodeList();
        this.mainFrame.showGeneralDerivationTreePaintedPanel(generalTree.rootNode);

    }

    private void validateGrammar(){
        //Call arrays generated by front
        //Verify not empty
        //Verify sets disjunction
        //Verify axiomatic isn't empty
    }

    public static void main(String[] args) {
        new Presenter();

        /**

        ArrayList<String> nonTerminalSymbolsList = new ArrayList<>();
        nonTerminalSymbolsList.add("S");
        nonTerminalSymbolsList.add("S");
        nonTerminalSymbolsList.add("S");
        ArrayList<String> terminalSymbolsList = new ArrayList<>();
        terminalSymbolsList.add("a");
        terminalSymbolsList.add("Sa");
        terminalSymbolsList.add("Sb");

        GeneralTree generalTree = new GeneralTree(terminalSymbolsList,nonTerminalSymbolsList, new Node("S"));
        generalTree.addNewNode();
        generalTree.showNodeList();

         */

    }
}
